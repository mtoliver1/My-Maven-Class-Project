pipeline {
    agent any

    tools {
        maven 'Maven_3.9.9'  // Ensure this matches Jenkins Global Tool Config
        jdk 'Java_17'        // Ensure Java_17 is installed in Jenkins
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/mtoliver1/My-Maven-Class-Project.git'
            }
        }

        stage('Build') {
            steps {
                dir('my-maven-class-project') {  // Ensure correct directory
                    bat 'mvn clean package -DskipTests'
                }
            }
        }

        stage('Test') {
            steps {
                dir('my-maven-class-project') {
                    bat 'mvn test'
                }
            }
            post {
                always {
                    junit 'my-maven-class-project/target/surefire-reports/*.xml'
                }
            }
        }

        stage('Code Analysis with SonarQube') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    dir('my-maven-class-project') {
                        bat """
                        mvn sonar:sonar \
                        -Dsonar.projectKey=my-maven-class-project \
                        -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
                        """
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 5, unit: 'MINUTES') {
                    script {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            echo "SonarQube Quality Gate failed: ${qg.status}"
                            return // Continue pipeline execution even if Quality Gate fails
                        }
                    }
                }
            }
        }

        stage('Code Coverage with JaCoCo') {
            steps {
                dir('my-maven-class-project') {
                    jacoco(execPattern: '**/target/jacoco.exec', 
                           classPattern: '**/target/classes', 
                           sourcePattern: '**/src/main/java')
                }
            }
        }

        stage('Archive Artifact') {
            steps {
                dir('my-maven-class-project') {
                    archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
                }
            }
        }
    }

    post {
        success {
            echo '✅ Build and analysis completed successfully!'
        }
        failure {
            echo '❌ Build or analysis failed. Check logs for details.'
        }
    }
}
